import { CSSBaseType } from './css';
import { CSSUnitValue } from './css-unit-value';
import { CSSStyleValue } from './css-style-value';
export declare type CSSNumberish = CSSNumericValue | number;
declare type CSSNumericType = Map<string | CSSBaseType, number | CSSBaseType>;
export declare class CSSUnitMap extends Map<string, number> {
    equals(other: CSSUnitMap): boolean;
}
export declare class CSSNumericValue extends CSSStyleValue {
    type: CSSNumericType;
    add(...values: CSSNumberish[]): CSSNumericValue;
    sub(...values: CSSNumberish[]): CSSNumericValue;
    mul(...values: CSSNumberish[]): CSSNumericValue;
    div(...values: CSSNumberish[]): CSSNumericValue;
    min(...values: CSSNumberish[]): CSSNumericValue;
    max(...values: CSSNumberish[]): CSSNumericValue;
    equals(...values: CSSNumberish[]): boolean;
    to(unit: string): CSSUnitValue;
    solve(): CSSNumericValue;
    static rectifyNumberishValue(num: CSSNumberish): CSSUnitValue | CSSNumericValue;
    private typesHaveSameNonZeroValues;
    private joinTypes;
    private applyPercentHintToType;
    private addTypes;
    private multiplyTypes;
    private negate;
    private invert;
    protected createType(unit: string): CSSNumericType;
    private createTypeFromUnitMap;
    private createSumValue;
    protected multiplyUnitMaps(u1: CSSUnitMap, u2: CSSUnitMap): CSSUnitMap;
}
declare enum CSSMathOperator {
    sum = 0,
    product = 1,
    negate = 2,
    invert = 3,
    min = 4,
    max = 5
}
export declare class CSSMathValue extends CSSNumericValue {
    readonly operator: CSSMathOperator;
}
export declare class CSSMathInvert extends CSSMathValue {
    readonly value: any;
    constructor(value: any);
}
export declare class CSSMathMax extends CSSMathValue {
    readonly values: any;
    constructor(...values: any[]);
}
export declare class CSSMathMin extends CSSMathValue {
    readonly values: any;
    constructor(...values: any[]);
}
export declare class CSSMathNegate extends CSSMathValue {
    readonly value: any;
    constructor(value: any);
}
export declare class CSSMathProduct extends CSSMathValue {
    readonly values: any;
    constructor(values: any);
}
export declare class CSSMathSum extends CSSMathValue {
    readonly values: any;
    constructor(values: any);
}
export {};
