"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const table_1 = require("table");
const logger_1 = require("../logger");
const chalk_1 = require("chalk");
/**
 * The style map containing all the css variables defined in the parsed identity css files
 */
class StyleMap {
    constructor() {
        this.map = {};
    }
    /**
     * Gets the CSSStyleValue given the corresponding property name
     *
     * @param property The name of the property (prepending `--` is not necessary but allowed)
     * @returns The corresponding style value
     */
    get(property) {
        let resolvedProperty = util_1.removeLeadingDashes(property);
        if (!this.map.hasOwnProperty(resolvedProperty))
            return;
        return this.map[resolvedProperty];
    }
    /**
     * Gets the CSSStyleValues corresponding to the given array of property names
     *
     * @param properties The array of property names
     * @returns The Object of found properties (the names are converted from hyphen-case to camel-case to allow for destructuring declarations)
     */
    getAll(properties) {
        let entries = {};
        properties.forEach(propName => {
            let resolvedProperty = util_1.removeLeadingDashes(propName);
            let property = this.get(resolvedProperty);
            if (property)
                entries[util_1.toCamelCase(resolvedProperty)] = property;
        });
        return entries;
    }
    /**
     * Gets the CSSStyleValues of the properties matching the given regex
     *
     * @param property A regular expression to ls against property names
     * @returns An array of StyleMapEntries
     */
    getSimilar(property) {
        let foundKeys = Object.keys(this.map).filter(k => k.match(property) != null);
        return foundKeys.map(k => ({
            name: k,
            value: this.map[k],
        }));
    }
    /**
     * Sets (or overwrites) a property in the style map
     *
     * @param property The name of the property
     * @param value The value of the property
     */
    set(property, value) {
        if (this.map.hasOwnProperty(property)) {
            logger_1.logger.warn(`Variable ${property} has been defined more times`);
        }
        this.map[property] = value;
    }
    /**
     * Runs a callbackFn on each of the properties contained in the style map
     *
     * @param callbackFn The callback to run against each property
     */
    forEach(callbackFn) {
        Object.keys(this.map).forEach(key => {
            callbackFn(key, this.map[key]);
        });
    }
    /**
     * Prints the StyleMap in a table
     */
    print() {
        const header = [chalk_1.default.bold('Variable'), chalk_1.default.bold('CSSStyleValue instance'), chalk_1.default.bold('Value')];
        logger_1.logger.info(`StyleMap:\n${table_1.table([
            header,
            ...Object
                .entries(this.map)
                .map(e => [`--${e[0]}`, e[1].constructor.name, e[1]])
        ], {
            border: table_1.getBorderCharacters('norc'),
        })}`);
    }
}
exports.StyleMap = StyleMap;
//# sourceMappingURL=style-map.js.map