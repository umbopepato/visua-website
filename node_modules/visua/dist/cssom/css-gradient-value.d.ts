import { CSSStyleValue } from './css-style-value';
import { CSSKeywordsValue, CSSKeywordValue } from './css-keyword-value';
import { CSSUnitValue } from './css-unit-value';
import { CSSColorValue } from './css-color-value';
import { CSSPositionValue } from './css-position-value';
export declare class CSSGradientStep {
    color: CSSColorValue;
    position?: CSSUnitValue;
    constructor(color: CSSColorValue, position?: CSSUnitValue);
    toString(): string;
}
export declare class CSSGradientValue extends CSSStyleValue {
}
export declare class CSSLinearGradient extends CSSGradientValue {
    steps: CSSGradientStep[];
    direction: CSSKeywordsValue | CSSUnitValue;
    private static readonly sidesOrCorners;
    constructor(steps: CSSGradientStep[], direction?: CSSKeywordsValue | CSSUnitValue);
    toString(): string;
}
export declare class CSSRepeatingLinearGradient extends CSSGradientValue {
    gradient: CSSLinearGradient;
    constructor(gradient: CSSLinearGradient);
}
export interface CSSRadialGradientDimensions {
    shape?: CSSKeywordValue;
    size?: CSSUnitValue | CSSKeywordValue | CSSUnitValue[];
    position?: CSSPositionValue;
}
export declare class CSSRadialGradient extends CSSGradientValue {
    steps: CSSGradientStep[];
    position: CSSPositionValue;
    size: CSSUnitValue | CSSKeywordValue | CSSUnitValue[];
    shape: CSSKeywordValue;
    constructor(steps: CSSGradientStep[], dimensions: CSSRadialGradientDimensions);
    private hasDefaultSize;
    private hasDefaultShape;
    private hasDefaultPosition;
    toString(): string;
}
export declare class CSSRepeatingRadialGradient extends CSSGradientValue {
    gradient: CSSRadialGradient;
    constructor(gradient: CSSRadialGradient);
}
