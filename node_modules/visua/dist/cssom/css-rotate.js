"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const css_numeric_value_1 = require("./css-numeric-value");
const dom_matrix_1 = require("./dom-matrix");
const css_1 = require("./css");
const css_unit_value_1 = require("./css-unit-value");
class CSSRotate {
    get x() {
        return this._x;
    }
    set x(val) {
        this._x = css_numeric_value_1.CSSNumericValue.rectifyNumberishValue(val);
    }
    get y() {
        return this._y;
    }
    set y(val) {
        this._y = css_numeric_value_1.CSSNumericValue.rectifyNumberishValue(val);
    }
    get z() {
        return this._z;
    }
    set z(val) {
        this._z = css_numeric_value_1.CSSNumericValue.rectifyNumberishValue(val);
    }
    get is2D() {
        return this.z.value === 1;
    }
    toMatrix() {
        const x = this.x.value;
        const y = this.y.value;
        const z = this.z.value;
        const angle = this.angle.to('deg').value;
        return new dom_matrix_1.DOMMatrix().rotateAxisAngleSelf(x, y, z, angle);
    }
    constructor(angle, x, y, z) {
        if (angle.type.size !== 1 || !angle.type.has('angle')) {
            throw new TypeError(`Failed to construct CSSRotate: ${JSON.stringify(angle)} is not an angle`);
        }
        this.angle = angle;
        if (!x && !y && !z) {
            this.x = css_1.CSS.number(0);
            this.y = css_1.CSS.number(0);
            this.z = css_1.CSS.number(1);
        }
        else {
            this.x = x;
            this.y = y;
            this.z = z;
            if (![this.x, this.y, this.z].every(v => v instanceof css_unit_value_1.CSSUnitValue && v.unit.baseType === 'number')) {
                throw new TypeError(`Failed to construct CSSRotate: Failed to rectify numberish value`);
            }
        }
    }
    toString() {
        return `rotate(${this.angle})`;
    }
}
exports.CSSRotate = CSSRotate;
//# sourceMappingURL=css-rotate.js.map