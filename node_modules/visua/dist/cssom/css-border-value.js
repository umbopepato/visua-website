"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const css_style_value_1 = require("./css-style-value");
const css_unit_value_1 = require("./css-unit-value");
const css_keyword_value_1 = require("./css-keyword-value");
/**
 * Represents a CSS border value like the one used in `border` properties.
 *
 * **Syntax**
 * ```
 * [<length>] <identifier> <color>
 * ```
 *
 * **Examples**
 * ```
 * --border: 1px solid black;
 * --border: 4px dotted #CCC;
 * ```
 */
class CSSBorderValue extends css_style_value_1.CSSStyleValue {
    constructor(components) {
        super();
        if (components.lineWidth instanceof css_unit_value_1.CSSUnitValue && components.lineWidth.value < 0) {
            throw new TypeError('Failed to construct CSSBorderValue: Component lineWidth cannot be a negative <length>');
        }
        if (components.lineStyle == null || components.color == null) {
            throw new TypeError('Failed to construct CSSBorderValue: Components lineStyle and color are required');
        }
        this.lineWidth = components.lineWidth || new css_keyword_value_1.CSSKeywordValue('medium');
        this.lineStyle = components.lineStyle;
        this.color = components.color;
    }
    /**
     * Serializes the `CSSBorderValue` to standard CSS
     */
    toString() {
        return `${this.lineWidth} ${this.lineStyle} ${this.color}`;
    }
}
CSSBorderValue.lineWidthKeywords = ['thin', 'medium', 'thick'];
CSSBorderValue.lineStyleKeywords = [
    'none',
    'hidden',
    'dotted',
    'dashed',
    'solid',
    'double',
    'groove',
    'ridge',
    'inset',
    'outset',
];
exports.CSSBorderValue = CSSBorderValue;
//# sourceMappingURL=css-border-value.js.map