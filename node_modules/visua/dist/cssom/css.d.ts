import { CSSUnitValue } from './css-unit-value';
export declare enum CSSUnit {
    number = "number",
    percent = "percent",
    px = "px",
    cm = "cm",
    mm = "mm",
    Q = "Q",
    in = "in",
    pc = "pc",
    pt = "pt",
    em = "em",
    ex = "ex",
    ch = "ch",
    ic = "ic",
    rem = "rem",
    lh = "lh",
    rlh = "rlh",
    vw = "vw",
    vh = "vh",
    vi = "vi",
    vb = "vb",
    vmin = "vmin",
    vmax = "vmax",
    rad = "rad",
    deg = "deg",
    grad = "grad",
    turn = "turn",
    s = "s",
    ms = "ms",
    Hz = "Hz",
    kHz = "kHz",
    dppx = "dppx",
    dpi = "dpi",
    dpcm = "dpcm",
    fr = "fr"
}
export declare enum CSSBaseType {
    number = "number",
    percent = "percent",
    length = "length",
    angle = "angle",
    time = "time",
    frequency = "frequency",
    resolution = "resolution",
    flex = "flex"
}
export interface CSSUnitData {
    name: CSSUnit;
    symbol: string;
    toCanonical: number;
    compatSet: number;
    baseType: CSSBaseType;
}
/**
 * A utility class which exposes various numeric factory functions
 * to easily create `CSSUnitValue`s, similar to
 * [CSS Typed Om's CSS namespace](https://www.w3.org/TR/css-typed-om-1/#numeric-factory).
 *
 * ```typescript
 * const size = CSS.px(14);
 * // Is a shorthand for
 * const size = new CSSUnitValue(14, 'px');
 * ```
 */
export declare class CSS {
    private static units;
    /**
     * Creates a `CSSUnitValue` with `value` and number unit
     *
     * @param value The numeric value
     */
    static number(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and percent unit
     *
     * @param value The numeric value
     */
    static percent(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and em unit
     *
     * @param value The numeric value
     */
    static em(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and ex unit
     *
     * @param value The numeric value
     */
    static ex(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and ch unit
     *
     * @param value The numeric value
     */
    static ch(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and rem unit
     *
     * @param value The numeric value
     */
    static rem(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and vw unit
     *
     * @param value The numeric value
     */
    static vw(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and vh unit
     *
     * @param value The numeric value
     */
    static vh(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and vmin unit
     *
     * @param value The numeric value
     */
    static vmin(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and vmax unit
     *
     * @param value The numeric value
     */
    static vmax(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and cm unit
     *
     * @param value The numeric value
     */
    static cm(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and mm unit
     *
     * @param value The numeric value
     */
    static mm(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and Q unit
     *
     * @param value The numeric value
     */
    static Q(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and in unit
     *
     * @param value The numeric value
     */
    static in(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and pt unit
     *
     * @param value The numeric value
     */
    static pt(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and pc unit
     *
     * @param value The numeric value
     */
    static pc(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and px unit
     *
     * @param value The numeric value
     */
    static px(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and deg unit
     *
     * @param value The numeric value
     */
    static deg(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and grad unit
     *
     * @param value The numeric value
     */
    static grad(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and rad unit
     *
     * @param value The numeric value
     */
    static rad(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and turn unit
     *
     * @param value The numeric value
     */
    static turn(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and s unit
     *
     * @param value The numeric value
     */
    static s(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and ms unit
     *
     * @param value The numeric value
     */
    static ms(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and Hz unit
     *
     * @param value The numeric value
     */
    static Hz(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and kHz unit
     *
     * @param value The numeric value
     */
    static kHz(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and dpi unit
     *
     * @param value The numeric value
     */
    static dpi(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and dpcm unit
     *
     * @param value The numeric value
     */
    static dpcm(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and dppx unit
     *
     * @param value The numeric value
     */
    static dppx(value: number): CSSUnitValue;
    /**
     * Creates a `CSSUnitValue` with `value` and fr unit
     *
     * @param value The numeric value
     */
    static fr(value: number): CSSUnitValue;
    /**
     * Returns true if the provided units are compatible (ie cm and mm are compatible, px and Hz are incompatible)
     *
     * @param units
     */
    static areCompatible(...units: string[]): boolean;
    /**
     * Gets some basic data about `unit` such as name, symbol or compatibility set
     *
     * @param unit The name or symbol of the unit
     */
    static getUnitData(unit: string | CSSUnit): CSSUnitData;
    /**
     * If `unit` is a valid css unit name or symbol returns its data, otherwise throws an error
     *
     * @param unit  The name or symbol of the unit
     */
    static resolveUnit(unit: string): CSSUnitData;
    /**
     * Gets the canonical unit of the compatibility set of which `unit` is part of
     *
     * @param unit The name of the unit
     */
    static getCanonicalUnit(unit: CSSUnit): CSSUnitData;
}
