import { CssLocation } from 'css-tree';
import { StyleMap } from './style-map';
export declare enum CssNodeType {
    AnPlusB = "AnPlusB",
    Atrule = "Atrule",
    AtrulePrelude = "AtrulePrelude",
    AttributeSelector = "AttributeSelector",
    Block = "Block",
    Brackets = "Brackets",
    CDC = "CDC",
    CDO = "CDO",
    ClassSelector = "ClassSelector",
    Combinator = "Combinator",
    Comment = "Comment",
    Declaration = "Declaration",
    DeclarationList = "DeclarationList",
    Dimension = "Dimension",
    Function = "Function",
    HexColor = "HexColor",
    IdSelector = "IdSelector",
    Identifier = "Identifier",
    MediaFeature = "MediaFeature",
    MediaQuery = "MediaQuery",
    MediaQueryList = "MediaQueryList",
    Nth = "Nth",
    Number = "Number",
    Operator = "Operator",
    Parentheses = "Parentheses",
    Percentage = "Percentage",
    PseudoClassSelector = "PseudoClassSelector",
    PseudoElementSelector = "PseudoElementSelector",
    Ratio = "Ratio",
    Raw = "Raw",
    Rule = "Rule",
    Selector = "Selector",
    SelectorList = "SelectorList",
    String = "String",
    StyleSheet = "StyleSheet",
    TypeSelector = "TypeSelector",
    UnicodeRange = "UnicodeRange",
    Url = "Url",
    Value = "Value",
    WhiteSpace = "WhiteSpace"
}
export declare class ParseError extends Error {
    constructor(message: string, location?: CssLocation);
}
export declare class Parser {
    private entrypoint;
    private strict;
    private plainAst;
    private styleMap;
    constructor(entrypoint: string, strict?: boolean);
    parse(): StyleMap;
    private analyzeAstAndResolveVariables;
    private generateVariablesMap;
    private validateVariableReferences;
    private resolveVariables;
    private processStyleSheet;
    private processAtRule;
    private processRule;
    private convertAstValue;
    private convertDeclaration;
    private convertTransform;
    private convertPosition;
    private convertDimension;
    private convertNumber;
    private convertFunction;
    private convertUrl;
    private convertHex;
    private convertPercentage;
    private convertCalc;
    private convertCalcBinaryExpression;
    private convertMin;
    private convertMax;
    private convertIdentifier;
    private convertString;
    private convertLinearGradient;
    private convertRadialGradient;
    private convertFontFamily;
    private convertFont;
    private convertBorder;
    private convertBoxShadow;
    private convertFilter;
}
