"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const css_style_value_1 = require("./css-style-value");
const css_1 = require("./css");
class CSSFilter {
}
exports.CSSFilter = CSSFilter;
class CSSBlurFilter extends CSSFilter {
    constructor(radius) {
        super();
        this.radius = radius;
        if (radius.unit.baseType !== css_1.CSSBaseType.length) {
            throw new TypeError('Failed to construct CSSBlurFilter: Argument amount must be of type <length>');
        }
    }
    toString() {
        return `blur(${this.radius})`;
    }
}
exports.CSSBlurFilter = CSSBlurFilter;
class CSSBrightnessFilter extends CSSFilter {
    constructor(value) {
        super();
        this.value = value;
        if (value.unit.name !== css_1.CSSUnit.percent) {
            throw new TypeError('Failed to construct CSSBrightnessFilter: Argument amount must be of type <percentage>');
        }
    }
    toString() {
        return `brightness(${this.value})`;
    }
}
exports.CSSBrightnessFilter = CSSBrightnessFilter;
class CSSContrastFilter extends CSSFilter {
    constructor(value) {
        super();
        this.value = value;
        if (value.unit.name !== css_1.CSSUnit.percent) {
            throw new TypeError('Failed to construct CSSContrastFilter: Argument amount must be of type <percentage>');
        }
    }
    toString() {
        return `contrast(${this.value})`;
    }
}
exports.CSSContrastFilter = CSSContrastFilter;
class CSSDropShadowFilter extends CSSFilter {
    constructor(value) {
        super();
        this.value = value;
    }
    toString() {
        return `drop-shadow(${this.value})`;
    }
}
exports.CSSDropShadowFilter = CSSDropShadowFilter;
class CSSGrayscaleFilter extends CSSFilter {
    constructor(amount) {
        super();
        this.amount = amount;
        if (amount.unit.name !== css_1.CSSUnit.percent) {
            throw new TypeError('Failed to construct CSSGrayscaleFilter: Argument amount must be of type <percentage>');
        }
    }
    toString() {
        return `grayscale(${this.amount})`;
    }
}
exports.CSSGrayscaleFilter = CSSGrayscaleFilter;
class CSSHueRotateFilter extends CSSFilter {
    constructor(angle) {
        super();
        this.angle = angle;
        if (angle.unit.baseType !== css_1.CSSBaseType.angle) {
            throw new TypeError('Failed to construct CSSHueRotateFilter: Argument angle must be of type <angle>');
        }
    }
    toString() {
        return `hue-rotate(${this.angle})`;
    }
}
exports.CSSHueRotateFilter = CSSHueRotateFilter;
class CSSInvertFilter extends CSSFilter {
    constructor(amount) {
        super();
        this.amount = amount;
        if (amount.unit.name !== css_1.CSSUnit.percent) {
            throw new TypeError('Failed to construct CSSInvertFilter: Argument amount must be of type <percentage>');
        }
    }
    toString() {
        return `invert(${this.amount})`;
    }
}
exports.CSSInvertFilter = CSSInvertFilter;
class CSSOpacityFilter extends CSSFilter {
    constructor(amount) {
        super();
        this.amount = amount;
        if (amount.unit.name !== css_1.CSSUnit.percent) {
            throw new TypeError('Failed to construct CSSOpacityFilter: Argument amount must be of type <percentage>');
        }
    }
    toString() {
        return `opacity(${this.amount})`;
    }
}
exports.CSSOpacityFilter = CSSOpacityFilter;
class CSSSaturateFilter extends CSSFilter {
    constructor(amount) {
        super();
        this.amount = amount;
        if (amount.unit.name !== css_1.CSSUnit.percent) {
            throw new TypeError('Failed to construct CSSSaturateFilter: Argument amount must be of type <percentage>');
        }
    }
    toString() {
        return `saturate(${this.amount})`;
    }
}
exports.CSSSaturateFilter = CSSSaturateFilter;
class CSSSepiaFilter extends CSSFilter {
    constructor(amount) {
        super();
        this.amount = amount;
        if (amount.unit.name !== css_1.CSSUnit.percent) {
            throw new TypeError('Failed to construct CSSSepiaFilter: Argument amount must be of type <percentage>');
        }
    }
    toString() {
        return `saturate(${this.amount})`;
    }
}
exports.CSSSepiaFilter = CSSSepiaFilter;
class CSSFilterValue extends css_style_value_1.CSSStyleValue {
    constructor(filters) {
        super();
        this.filters = filters;
    }
    toString() {
        return this.filters.join(' ');
    }
}
exports.CSSFilterValue = CSSFilterValue;
//# sourceMappingURL=css-filter-value.js.map