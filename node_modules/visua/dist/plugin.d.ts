import { StyleMap } from './cssom/style-map';
/**
 * A function that takes a textual option value and deserializes it
 */
export declare type ValueInitializer = (value: string) => any;
/**
 * An `Object` whose keys are strings corresponding to your options names without the leading “--” and whose values
 * are either type constructors such as `String` or `Boolean` or `ValueInitializers`
 */
export declare type OptionsMap = {
    [key: string]: Function | ValueInitializer;
};
/**
 * A base class to create Visua CLI plugins
 */
export declare abstract class Plugin {
    /**
     * Plugin command line options map
     *
     * If your plugin uses some options you should override this accessor to return a non-empty `OptionsMap`.
     * For example if your plugin accepts two options:
     *
     * - `optOne`, a boolean flag
     * - `optTwo`, a comma-separated list of strings
     *
     * The corresponding implementation of options would be:
     * ```typescript
     * static get options(): OptionsMap {
     *     return {
     *         optOne: Boolean,
     *         optTwo: (value: string) => value.split(','),
     *     };
     * }
     * ```
     */
    static readonly options: OptionsMap;
    /**
     * The entry point of the plugin called by the CLI after the options have been initialized
     *
     * @param styleMap The StyleMap Visua generated from the loaded identity css files
     * @param options The initialized plugin options
     */
    abstract run(styleMap: StyleMap, options: {
        [key: string]: any;
    }): any;
}
/**
 * An Error class for plugin exceptions
 */
export declare class PluginError extends Error {
    /**
     * Creates a new PluginError
     *
     * @param message The error's message
     */
    constructor(message: string);
}
/**
 * A utility template literal tag for writing string templates that corrects indentation
 * and removes lines where at least one interpolation expression is `null` or `undefined`.
 *
 * @param strings
 * @param values
 */
export declare function templatel(strings: TemplateStringsArray, ...values: any[]): string;
/**
 * A utility template literal tag for writing templates that corrects indentation
 * and prevents `null` and `undefined` values from showing.
 *
 * Unlike `templatel` this doesn't remove entire lines that contain null or undefined expressions.
 *
 * @param strings
 * @param values
 */
export declare function template(strings: TemplateStringsArray, ...values: Array<string>): string;
