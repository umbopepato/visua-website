"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const readline_promise_1 = require("readline-promise");
const util = require("util");
const child_process_1 = require("child_process");
const fs = require("fs");
const rimraf = require("rimraf");
const path = require("path");
const chalk_1 = require("chalk");
const template_file_1 = require("template-file");
const asyncExec = util.promisify(child_process_1.exec);
const rlp = readline_promise_1.default.createInterface({
    input: process.stdin,
    output: process.stdout,
});
exports.plugin = () => __awaiter(this, void 0, void 0, function* () {
    console.log('Creating a new empty visua plugin.\n');
    let slug = yield rlp.questionAsync(b('Choose a slug for your plugin: ') + 'visua-');
    while (slug == null || slug.length === 0) {
        slug = yield rlp.questionAsync(b('Please provide a non empty slug: ') + 'visua-');
    }
    const pluginName = `visua-${slug}`;
    let displayName = yield rlp.questionAsync(b('Choose a display name for your plugin: '));
    while (!displayName || !displayName.length) {
        displayName = yield rlp.questionAsync(b('Please provide a non empty display name: '));
    }
    const description = yield rlp.questionAsync(b('Enter a short description: '));
    const author = yield rlp.questionAsync(b('Author: '));
    const repository = yield rlp.questionAsync(b('Git repository: '));
    const pluginDir = path.join(process.cwd(), pluginName);
    console.log('Creating plugin directory');
    fs.mkdirSync(pluginDir);
    console.log('Cloning starter template');
    yield asyncExec(`git clone https://github.com/umbopepato/visua-plugin-template ${pluginDir}`);
    console.log('Writing package.json');
    const packagePath = path.join(pluginDir, 'package.json');
    const pkg = require(packagePath);
    pkg.name = pluginName;
    pkg.description = description;
    pkg.author = author;
    pkg.repository = repository;
    fs.writeFileSync(packagePath, JSON.stringify(pkg, null, 4));
    const readmePath = path.join(pluginDir, 'README.md');
    console.log('Writing README');
    fs.writeFileSync(readmePath, yield template_file_1.renderTemplateFile(readmePath, { slug, pluginName, displayName, description }));
    console.log('Removing versioning\n');
    rimraf(path.join(pluginDir, '.git'), () => {
        console.log(`Project succesfully created in folder ${pluginName}!`);
        console.log('See https://visua.io/guide/writing-plugins to learn more about visua plugins development');
        process.exit();
    });
});
const b = (str) => chalk_1.default.hex('#11adff')(str);
//# sourceMappingURL=plugin.js.map