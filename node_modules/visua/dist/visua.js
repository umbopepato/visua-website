"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const fsPath = require("path");
const fs = require("fs");
const parser_1 = require("./cssom/parser");
__export(require("./plugin"));
__export(require("./cssom/style-map"));
__export(require("./cssom/css"));
__export(require("./cssom/css-border-value"));
__export(require("./cssom/css-box-shadow-value"));
__export(require("./cssom/css-color-value"));
__export(require("./cssom/css-filter-value"));
__export(require("./cssom/css-font-family-value"));
__export(require("./cssom/css-font-value"));
__export(require("./cssom/css-gradient-value"));
__export(require("./cssom/css-keyword-value"));
__export(require("./cssom/css-numeric-value"));
__export(require("./cssom/css-perspective"));
__export(require("./cssom/css-position-value"));
__export(require("./cssom/css-rotate"));
__export(require("./cssom/css-scale"));
__export(require("./cssom/css-skew"));
__export(require("./cssom/css-skew-x"));
__export(require("./cssom/css-skew-y"));
__export(require("./cssom/css-style-value"));
__export(require("./cssom/css-string-value"));
__export(require("./cssom/css-timing-function-value"));
__export(require("./cssom/css-transform-value"));
__export(require("./cssom/css-translate"));
__export(require("./cssom/css-unit-value"));
__export(require("./cssom/css-url-value"));
__export(require("./cssom/dom-matrix"));
const DEFAULT_IDENTITY_FILE_NAME = 'identity.css';
const DEFAULT_IDENTITY_FILE_PATH = fsPath.join(process.cwd(), DEFAULT_IDENTITY_FILE_NAME);
/**
 * Builds a StyleMap from the provided identity stylesheets.
 *
 * If called without options, the `visua` method searches for a file named exactly
 * identity.css in the current working directory:
 *
 * ```typescript
 * const styleMap = visua();
 * ```
 *
 * The path option can be used to specify a relative path to a directory containing
 * the file identity.css or to a specific file.
 *
 * The following example searches for a file named identity.css in cwd/subdir:
 * ```typescript
 * const styleMap = visua({
 *     path: 'subdir',
 * });
 * ```
 *
 * The following example loads a file named main.css in subdir subdirectory:
 * ```typescript
 * const styleMap = visua({
 *     path: 'subdir/main.css',
 * });
 * ```
 *
 * The strict option can be used to terminate the process on parse errors,
 * otherwise Visua will try to recover from soft errors in the css:
 * ```typescript
 * const styleMap = visua({
 *     path: 'subdir/main.css',
 *     strict: true,
 * });
 * ```
 *
 * @param options Visua options
 * @returns The generated StyleMap
 */
exports.visua = (options) => {
    let path = DEFAULT_IDENTITY_FILE_PATH;
    let strict = false;
    if (options) {
        if (options.path != null) {
            if (fs.lstatSync(options.path).isDirectory()) {
                path = fsPath.join(options.path, DEFAULT_IDENTITY_FILE_NAME);
            }
            else {
                path = options.path;
            }
        }
        if (options.strict != null) {
            strict = options.strict;
        }
    }
    return new parser_1.Parser(path, strict).parse();
};
//# sourceMappingURL=visua.js.map