"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const css_numeric_value_1 = require("./css-numeric-value");
const css_style_value_1 = require("./css-style-value");
const css_1 = require("./css");
const css_keyword_value_1 = require("./css-keyword-value");
const css_unit_value_1 = require("./css-unit-value");
var Bias;
(function (Bias) {
    Bias[Bias["AUTO"] = 0] = "AUTO";
    Bias[Bias["HORIZONTAL"] = 1] = "HORIZONTAL";
    Bias[Bias["VERTICAL"] = 2] = "VERTICAL";
})(Bias || (Bias = {}));
class CSSPositionValue extends css_style_value_1.CSSStyleValue {
    constructor(...parts) {
        super();
        this.x = css_1.CSS.percent(50);
        this.y = css_1.CSS.percent(50);
        this.bias = Bias.AUTO;
        if (parts.length === 1) {
            this.setXorYFromSingleValue(parts[0]);
        }
        else if (parts.length === 2) {
            this.setXorYFromSingleValue(parts[0]);
            this.toggleBias();
            this.setXorYFromSingleValue(parts[1]);
        }
        else {
            if (parts[0] instanceof css_keyword_value_1.CSSKeywordValue &&
                parts[1] instanceof css_numeric_value_1.CSSNumericValue &&
                (parts[1].type.has('length') ||
                    parts[1].type.has('percentage'))) {
                this.setXorYFromKeywordAndLength(parts[0], parts[1]);
            }
            else {
                this.setXorYFromSingleValue(parts[0]);
            }
            this.toggleBias();
            if (parts.length === 3) {
                this.setXorYFromSingleValue(parts[3]);
            }
            else {
                if (parts[2] instanceof css_keyword_value_1.CSSKeywordValue &&
                    parts[3] instanceof css_numeric_value_1.CSSNumericValue &&
                    (parts[3].type.has('length') ||
                        parts[3].type.has('percentage'))) {
                    this.setXorYFromKeywordAndLength(parts[2], parts[3]);
                }
                else {
                    throw new TypeError(`Invalid position structure`);
                }
            }
        }
    }
    toggleBias() {
        if (this.bias.valueOf() === Bias.HORIZONTAL) {
            this.bias = Bias.VERTICAL;
        }
        else {
            this.bias = Bias.HORIZONTAL;
        }
    }
    setXorYFromKeywordAndLength(keyword, length) {
        this.setXorYFromSingleValue(keyword);
        let adjustment = length;
        if (keyword.value === 'right' || keyword.value === 'bottom') {
            adjustment = css_1.CSS.px(0).sub(length);
        }
        if (this.bias.valueOf() === Bias.HORIZONTAL) {
            this.x.add(adjustment);
        }
        else if (this.bias.valueOf() === Bias.VERTICAL) {
            this.y.add(adjustment);
        }
    }
    setXorYFromSingleValue(value) {
        if (value instanceof css_keyword_value_1.CSSKeywordValue) {
            if (value.value === 'left' && this.bias.valueOf() !== Bias.VERTICAL) {
                this.x = css_1.CSS.percent(0);
                this.bias = Bias.HORIZONTAL;
                return;
            }
            else if (value.value === 'right' && this.bias.valueOf() !== Bias.VERTICAL) {
                this.x = css_1.CSS.percent(100);
                this.bias = Bias.HORIZONTAL;
                return;
            }
            else if (value.value === 'top' && this.bias.valueOf() !== Bias.HORIZONTAL) {
                this.y = css_1.CSS.percent(0);
                this.bias = Bias.VERTICAL;
                return;
            }
            else if (value.value === 'bottom' && this.bias.valueOf() !== Bias.HORIZONTAL) {
                this.y = css_1.CSS.percent(100);
                this.bias = Bias.VERTICAL;
                return;
            }
            else {
                if (value.value !== 'center')
                    throw new TypeError(`Unexpected keyword ${value.value}`);
            }
        }
        else if (value instanceof css_numeric_value_1.CSSNumericValue) {
            if (!value.type.has('length') && !value.type.has('percentage')) {
                throw new TypeError(`Unexpected type ${value.type}`);
            }
            if (this.bias.valueOf() === Bias.VERTICAL) {
                this.y = value;
            }
            else {
                this.x = value;
                this.bias = Bias.HORIZONTAL;
                return;
            }
        }
        else {
            throw new TypeError(`Unexpected value ${value}`);
        }
    }
    static serializeX(percent) {
        if (percent instanceof css_unit_value_1.CSSUnitValue && percent.unit.name === css_1.CSSUnit.percent) {
            switch (percent.value) {
                case 0: return 'left';
                case 50: return 'center';
                case 100: return 'right';
            }
        }
        return percent;
    }
    static serializeY(percent) {
        if (percent instanceof css_unit_value_1.CSSUnitValue && percent.unit.name === css_1.CSSUnit.percent) {
            switch (percent.value) {
                case 0: return 'top';
                case 50: return 'center';
                case 100: return 'bottom';
            }
        }
        return percent;
    }
    get isCenter() {
        let center = css_1.CSS.percent(50);
        return this.x.equals(center) && this.y.equals(center);
    }
    toString() {
        if (this.isCenter)
            return 'center';
        let components = [
            CSSPositionValue.serializeX(this.x),
            CSSPositionValue.serializeY(this.y),
        ];
        return `${components.join(' ')}`;
    }
}
exports.CSSPositionValue = CSSPositionValue;
//# sourceMappingURL=css-position-value.js.map